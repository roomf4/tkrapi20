~/tkrapi20/features.txt

NOT DONE YET:

predictfrom_mlmodels.bash
# This script should demo how to generate predictions from mlmodels table.

  
website:
  keras4.us
  keras4.herokuapp.com
  
heroku:
    serve models
    
list of resources:

  - CRUD Keras models
  - retrieve, use a model
  - CRUD sklinear model, use the model
  
keras.js demo

  - select predictions from db
  - report predictions
    - bokeh
    - matplotlib
    - seaborn
question:
  - can I have a 1-neuron output layer which outputs binary logistic regression?
  
Site should have list of behaviorial dimensions:
  - training sizes
  - join candidates: gspc, gld, tlt, rut, xom
  - prediction types: pct_lead-1day, pct_lead-2day, pct_lead-5day
  - tkr


SHOULD BE DONE NOW:

Start features.txt
bitb repo: tkrapi20
README.md started
get tkrlist.txt from ~/tkrapi2/tkrlist.txt

Install cuda, tensorflow on dan@u78: DONE: ~dan/py36/, tensorflow-gpu (1.2.1)

Tinker with flask-restful to ensure it works:
  dict -> json
  static-json

write,run script to remove invalid tkrs from tkrlist.txt

Write retry_request_tkr.bash to get tkrs which need 2nd try
Enhance request_tkr.bash so it calls retry_request_tkr.bash to get tkrs which need 2nd try

Write retry_curl_tkrs.bash to get tkrs which need 2nd try
Enhance curl_tkrs.bash so it calls retry_curl_tkrs.bash  to get tkrs which need 2nd try


postgres account:
  tkrapi/tkrapi
  syntax:
    create role tkrapi with login super user password 'tkrapi';
    create database tkrapi;
  db_s = 'postgres://tkrapi:tkrapi@127.0.0.1/tkrapi'

request splits,div
enhance curl_tkr.bash

genf.py

resources:
  /algo_demos
  /demos
  /features
  /tkrs
  /tkrlist
  /years
  /tkrprices/IBM
  /istkr/IBM  
  /sklinear/IBM/25/2016-11?features='pct_lag1,slope4,moy'
  /keraslinear/ABC/25/2016-11/'pct_lag1,slope4,moy'
  /keras_nn/ABC/25/2016-11?features='pct_lag1,slope4,moy'&hl=2&neurons=4
  /sklinear_yr/IBM/25/2016/'pct_lag1,slope4,moy'
  /sklinear_tkr/IBM/25/'pct_lag1,slope4,moy'
  /keras_nn_yr/ABC/25/2016?features='pct_lag1,slope4,moy'&hl=2&neurons=4
  /keras_nn_tkr/ABC/25?features='pct_lag1,slope4,moy'&hl=2&neurons=4
  /tkrinfo/ibm

enhance predictions2db so it does delete and insert.

questions:
  - how to create a 2 layer net having 1 neuron in output layer with linear output?
  - query of relu in keras help me?
  - yes, found linear(x) here: https://keras.io/activations/

def check_features(f_s):
  return features_s
  
remove tempfile code from predictions2db


readme:
  - meetup url
  - virtualbox dl
  - git clone
  - git pull
  - demos:
    - demosql.py
    - demoflask_restful.py
    - demokeras.py
    - flaskr.bash
    - walk through urls
    
fix requirements.txt

refactor sql_s so it uses %s rather than +str+


localhost:5011/db/kerasnn/IBM/3/2017-08?features='pct_lag1,slope4,moy'&hl=3&neurons=5
  get predictions from db
  

/db1st_model2nd/kerasnn/IBM/3/2017-08?features='pct_lag1,slope4,moy'&hl=3&neurons=5"
  get predictions from db , else get predictions from model
  
  
Site should have README.md
The README should list installation steps
Site should have features.txt


prediction reports:
  group by counts:
    algo, tkr, yrs, yr, feature-group


/prediction_counts
backed by:
select
algo
,tkr
,yrs                   training_yrs
,features              feature_group
,substring(mnth for 4) yr
,count(tkr)            count_tkr
from predictions
group by algo,tkr,yrs,features,substring(mnth for 4)
order by algo,tkr,yrs,features,substring(mnth for 4)
;



/prediction_dimensions

select distinct tkr from predictions;
select distinct yrs from predictions;
select distinct mnth from predictions;
select distinct algo from predictions;

select distinct substring(mnth for 4) yr from predictions;
select distinct algo_params from predictions where algo = 'kerasnn';


csv-servings:
  http://flask-restful.readthedocs.io/en/0.3.5/extending.html#response-formats
  tkrprices -- done
  features  -- done
  predictions --  study current json prediction getters
    -- study: api.add_resource(flc.Db,    '/db/<algo>/<tkr>/<int:yrs>/<mnth>')
    good resource to build:
      api.add_resource(Csv, '/csv/<algo>/<tkr>/<int:yrs>/<mnth>') -- done
      api.add_resource(CsvYr, '/csvyr/<algo>/<tkr>/<int:yrs>/<int:yr>')


heroku:
  - setup flask server
    serve predictions
    hflaskr.bash
    hflaskr.py
    copy postgres data to heroku

add /demos to hflask.py


cr_model.py:
  should create models and save them to db table: mlmodels
  

prediction rpts:
  g.b. tkr, yrs, mnth, moy, dow, yr, algo, features
  copy df data into predictions2, report from predictions2
  write rpt_pred.bash
  
study dropout of sklinear


write:
  bin/sklearn_many.bash FB
  which should learn predict FB for dimensions:
    - features loop
    - yrs: [3,4,5,7,10,15,20,25,30]
    - enhancement: collect sklinear coefficents
    
